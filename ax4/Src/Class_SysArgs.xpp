
    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public SysArgs ensureCallerFormName(FormName formName, str _funcname = '')
    {;
        SysArgs::assertCallerFormName(this, formName, _funcname ? _funcname : funcname());
        return this;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public SysArgs ensureCallerType(classId  potentialAncestorClassId, str _funcname = '')
    {;
        SysArgs::assertCallerType(this, potentialAncestorClassId, _funcname ? _funcname : funcname());
        return this;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public SysArgs ensureEnumType(EnumId enumId, str _funcname = '')
    {;
        SysArgs::assertEnumType(this, enumId, _funcname ? _funcname : funcname());
        return this;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public SysArgs ensureFormDatasource(str _funcname = '')
    {;
        SysArgs::assertFormDatasource(this, _funcname ? _funcname : funcname());
        return this;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public SysArgs ensureRecord(TableId tableId = 0, str _funcname = '')
    {;
        SysArgs::assertRecord(this, tableId, _funcname ? _funcname : funcname());
        return this;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public SysArgs ensureRecordExists(TableId tableId = 0, str _funcname = '')
    {;
        SysArgs::assertRecordExists(this, tableId, _funcname ? _funcname : funcname());
        return this;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static void assertCallerFormName(Args args, FormName formName, str _funcname = '')
    {
        if( SysArgs::getCallerFormName(args) == formName)
            return;

        throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static void assertCallerType(Args args, classId  potentialAncestorClassId, str _funcname = '')
    {
        if( SysArgs::checkCallerType(args, potentialAncestorClassId) )
            return;

        throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static void assertEnumType(Args args, EnumId enumId, str _funcname = '')
    {
        if( SysArgs::checkEnumType(args, enumId) )
            return;

        throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static void assertFormDatasource(Args args, str _funcname = '')
    {
        if (args && args.record() && args.record().isFormDataSource())
            return;

        throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static void assertRecord(Args args, TableId tableId = 0, str _funcname = '')
    {
        if ( SysArgs::checkRecord(args, tableId) )
            return;

        throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static void assertRecordExists(Args args, TableId tableId = 0, str _funcname = '')
    {
        if ( SysArgs::checkRecordExists(args, tableId) )
            return;

        throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static boolean checkCallerType(Args args, classId  potentialAncestorClassId)
    {
        boolean checkOk = args && args.caller() && SysDictClass::is(args.caller(), potentialAncestorClassId);
        ;

        return checkOk;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static boolean checkEnumType(Args args, EnumId enumId)
    {
        boolean checkOk = (args && args.parmEnumType() == enumId);

        return checkOk;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    // запись из указанной таблицы (или любой таблицы для tableId = 0)
    public static boolean checkRecord(Args args, TableId tableId = 0)
    {
        boolean checkOk = (args != null);

        if( checkOk && tableId )
        {
            checkOk = args.dataset() == tableId;
        }

        return checkOk;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    // запись существует (recId != 0) и запись из указанной таблицы (или любой таблицы для tableId = 0)
    public static boolean checkRecordExists(Args args, TableId tableId = 0)
    {
        boolean checkOk = (SysArgs::checkRecord(args, tableId) && args.record() && args.record().RecId != 0);

        return checkOk;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static str getCallerFormName(Args args)
    {
        FormRun formRun;
    ;
        SysArgs::assertCallerType(args, classnum(FormRun));

        formRun = args.caller();
        return formRun.form().name();
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    // убедиться что в аргументах enum указанного типа и
    // вернуть значение этого enum из аргументов
    // бросает исключение, если enum не указанного типа
    public static int getEnum(Args args, EnumId enumId)
    {
    ;
        SysArgs::assertEnumType(args, enumId);
        return args.parmEnum();
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    // тоже самое, что и SysArgs::getEnum()
    // но если в аргументах не нужный enum не выдает ошибку, а возвращает дефолтное значение.
    public static int getEnumDefault(Args args, EnumId enumId, int defaultValue)
    {
        if( SysArgs::checkEnumType(args, enumId) )
            return args.parmEnum();

        return defaultValue;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static container getMarkedRecIds(Args args, TableId tableId)
    {
        container       ret;
        FormDataSource  fds;
        common          record;
    ;
        SysArgs::assertRecord(args, tableId);

        fds = args.record().dataSource();
        if( fds && fds.anyMarked() )
        {
            // marked records
            for( record = fds.getFirst(true) ; record ; record = fds.getNext() )
            {
                ret += record.RecId;
            }
        }

        if( ret == connull() )
        {
            // or a record itself
            record = SysArgs::getRecord(args, tableId);
            ret += record.RecId;
        }

        return ret;
    }

    //
    // mazzy, https://github.com/mazzy-ax/SysArgs
    //
    public static Common getRecord(Args args, TableId tableId = 0)
    {;
        SysArgs::assertRecord(args, tableId);

        return args.record();
    }
