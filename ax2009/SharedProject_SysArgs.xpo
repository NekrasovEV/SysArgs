Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: SysArgs unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysArgs
    PROPERTIES
      Name                #SysArgs
      Extends             #Args
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #ensureCallerFormName
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public SysArgs ensureCallerFormName(FormName formName, str _funcname = '')
        #{;
        #    SysArgs::assertCallerFormName(this, formName, _funcname ? _funcname : funcname());
        #    return this;
        #}
      ENDSOURCE
      SOURCE #ensureCallerType
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public SysArgs ensureCallerType(classId  potentialAncestorClassId, str _funcname = '')
        #{;
        #    SysArgs::assertCallerType(this, potentialAncestorClassId, _funcname ? _funcname : funcname());
        #    return this;
        #}
      ENDSOURCE
      SOURCE #ensureEnumType
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public SysArgs ensureEnumType(EnumId enumId, str _funcname = '')
        #{;
        #    SysArgs::assertEnumType(this, enumId, _funcname ? _funcname : funcname());
        #    return this;
        #}
      ENDSOURCE
      SOURCE #ensureFormDatasource
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public SysArgs ensureFormDatasource(str _funcname = '')
        #{;
        #    SysArgs::assertFormDatasource(this, _funcname ? _funcname : funcname());
        #    return this;
        #}
      ENDSOURCE
      SOURCE #ensureRecord
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public SysArgs ensureRecord(TableId tableId = 0, str _funcname = '')
        #{;
        #    SysArgs::assertRecord(this, tableId, _funcname ? _funcname : funcname());
        #    return this;
        #}
      ENDSOURCE
      SOURCE #ensureRecordExists
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public SysArgs ensureRecordExists(TableId tableId = 0, str _funcname = '')
        #{;
        #    SysArgs::assertRecordExists(this, tableId, _funcname ? _funcname : funcname());
        #    return this;
        #}
      ENDSOURCE
      SOURCE #assertCallerFormName
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static void assertCallerFormName(Args args, FormName formName, str _funcname = '')
        #{
        #    if( SysArgs::getCallerFormName(args) == formName)
        #        return;
        #
        #    throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertCallerType
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static void assertCallerType(Args args, classId  potentialAncestorClassId, str _funcname = '')
        #{
        #    if( SysArgs::checkCallerType(args, potentialAncestorClassId) )
        #        return;
        #
        #    throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertEnumType
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static void assertEnumType(Args args, EnumId enumId, str _funcname = '')
        #{
        #    if( SysArgs::checkEnumType(args, enumId) )
        #        return;
        #
        #    throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertFormDatasource
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static void assertFormDatasource(Args args, str _funcname = '')
        #{
        #    if (args && args.record() && args.record().isFormDataSource())
        #        return;
        #
        #    throw error(Error::wrongUseOfFunction(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertRecord
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static void assertRecord(Args args, TableId tableId = 0, str _funcname = '')
        #{
        #    if ( SysArgs::checkRecord(args, tableId) )
        #        return;
        #
        #    throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #assertRecordExists
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static void assertRecordExists(Args args, TableId tableId = 0, str _funcname = '')
        #{
        #    if ( SysArgs::checkRecordExists(args, tableId) )
        #        return;
        #
        #    throw error(Error::missingRecord(_funcname ? _funcname : funcname()));
        #}
      ENDSOURCE
      SOURCE #checkCallerType
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static boolean checkCallerType(Args args, classId  potentialAncestorClassId)
        #{
        #    boolean checkOk = args && args.caller() && SysDictClass::is(args.caller(), potentialAncestorClassId);
        #    ;
        #
        #    return checkOk;
        #}
      ENDSOURCE
      SOURCE #checkEnumType
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static boolean checkEnumType(Args args, EnumId enumId)
        #{
        #    boolean checkOk = (args && args.parmEnumType() == enumId);
        #
        #    return checkOk;
        #}
      ENDSOURCE
      SOURCE #checkRecord
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #// запись из указанной таблицы (или любой таблицы для tableId = 0)
        #public static boolean checkRecord(Args args, TableId tableId = 0)
        #{
        #    boolean checkOk = (args != null);
        #
        #    if( checkOk && tableId )
        #    {
        #        checkOk = args.dataset() == tableId;
        #    }
        #
        #    return checkOk;
        #}
      ENDSOURCE
      SOURCE #checkRecordExists
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #// запись существует (recId != 0) и запись из указанной таблицы (или любой таблицы для tableId = 0)
        #public static boolean checkRecordExists(Args args, TableId tableId = 0)
        #{
        #    boolean checkOk = (SysArgs::checkRecord(args, tableId) && args.record() && args.record().RecId != 0);
        #
        #    return checkOk;
        #}
      ENDSOURCE
      SOURCE #getCallerFormName
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static str getCallerFormName(Args args)
        #{
        #    FormRun formRun;
        #;
        #    SysArgs::assertCallerType(args, classnum(FormRun));
        #
        #    formRun = args.caller();
        #    return formRun.form().name();
        #}
      ENDSOURCE
      SOURCE #getEnum
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #// убедиться что в аргументах enum указанного типа и
        #// вернуть значение этого enum из аргументов
        #// бросает исключение, если enum не указанного типа
        #public static int getEnum(Args args, EnumId enumId)
        #{
        #;
        #    SysArgs::assertEnumType(args, enumId);
        #    return args.parmEnum();
        #}
      ENDSOURCE
      SOURCE #getEnumDefault
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #// тоже самое, что и SysArgs::getEnum()
        #// но если в аргументах не нужный enum не выдает ошибку, а возвращает дефолтное значение.
        #public static int getEnumDefault(Args args, EnumId enumId, int defaultValue)
        #{
        #    if( SysArgs::checkEnumType(args, enumId) )
        #        return args.parmEnum();
        #
        #    return defaultValue;
        #}
      ENDSOURCE
      SOURCE #getMarkedRecIds
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static container getMarkedRecIds(Args args, TableId tableId)
        #{
        #    container       ret;
        #    FormDataSource  fds;
        #    common          record;
        #;
        #    SysArgs::assertRecord(args, tableId);
        #
        #    fds = args.record().dataSource();
        #    if( fds && fds.anyMarked() )
        #    {
        #        // marked records
        #        for( record = fds.getFirst(true) ; record ; record = fds.getNext() )
        #        {
        #            ret += record.RecId;
        #        }
        #    }
        #
        #    if( ret == connull() )
        #    {
        #        // or a record itself
        #        record = SysArgs::getRecord(args, tableId);
        #        ret += record.RecId;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getRecord
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #public static Common getRecord(Args args, TableId tableId = 0)
        #{;
        #    SysArgs::assertRecord(args, tableId);
        #
        #    return args.record();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysArgsTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysArgsTest
    PROPERTIES
      Name                #SysArgsTest
      Extends             #SysTestCase
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysArgs
        #//
        #
        #// not yet implemented
        #// - the test testAssertFormDatasource() when a record.isFormDataSource()
        #// - tests for SysArgs::getMarkedRecIds()
        #class SysArgsTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testAssertCallerFormName
        #void testAssertCallerFormName()
        #{
        #    Args        args            = new Args();
        #
        #    str         formName        = formstr(SysUserInfo);
        #    Args        formRunArgs     = new Args(formName);
        #    FormRun     formRun         = classFactory.formRunClass(formRunArgs);
        #;
        #    args.caller(formRun);
        #
        #    this.parmExceptionExpected(false);
        #    SysArgs::assertCallerFormName(args, formName);
        #}
      ENDSOURCE
      SOURCE #testAssertCallerFormName_Empty
        #void testAssertCallerFormName_Empty()
        #{
        #    Args    args        = new Args();
        #    str     formName    = formstr(SysUserInfo);
        #;
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertCallerFormName(args, formName);
        #}
      ENDSOURCE
      SOURCE #testAssertCallerFormName_NotForm
        #void testAssertCallerFormName_NotForm()
        #{
        #    Args    args        = new Args();
        #    str     formName    = formstr(SysUserInfo);
        #;
        #    args.caller(this);
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertCallerFormName(args, formName);
        #}
      ENDSOURCE
      SOURCE #testAssertCallerFormName_NotMatch
        #void testAssertCallerFormName_NotMatch()
        #{
        #    Args        args            = new Args();
        #
        #    str         formName        = formstr(SysUserInfo);
        #    Args        formRunArgs     = new Args(formName);
        #    FormRun     formRun         = classFactory.formRunClass(formRunArgs);
        #;
        #    args.caller(formRun);
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertCallerFormName(args, formstr(SysUserGroupInfo));
        #}
      ENDSOURCE
      SOURCE #testAssertCallerFormName_Null
        #void testAssertCallerFormName_Null()
        #{
        #    Args    args;
        #    str     formName    = formstr(SysUserInfo);
        #;
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertCallerFormName(args, formName);
        #}
      ENDSOURCE
      SOURCE #testAssertCallerType
        #void testAssertCallerType()
        #{
        #    Args    args    = new Args();
        #;
        #    args.caller(this);
        #
        #    this.parmExceptionExpected(false);
        #    SysArgs::assertCallerType(args, classidget(this));
        #}
      ENDSOURCE
      SOURCE #testAssertCallerType_Ancestor
        #void testAssertCallerType_Ancestor()
        #{
        #    Args    args    = new Args();
        #;
        #    args.caller(this);
        #
        #    this.parmExceptionExpected(false);
        #    SysArgs::assertCallerType(args, classnum(SysTestAssert));
        #}
      ENDSOURCE
      SOURCE #testAssertCallerType_Empty
        #void testAssertCallerType_Empty()
        #{
        #    Args    args    = new Args();
        #;
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertCallerType(args, classidget(this));
        #}
      ENDSOURCE
      SOURCE #testAssertCallerType_Interface
        #void testAssertCallerType_Interface()
        #{
        #    Args    args    = new Args();
        #;
        #    args.caller(this);
        #
        #    this.parmExceptionExpected(false);
        #    SysArgs::assertCallerType(args, classnum(SysTestable));
        #}
      ENDSOURCE
      SOURCE #testAssertCallerType_NotMatch
        #void testAssertCallerType_NotMatch()
        #{
        #    Args    args    = new Args();
        #;
        #    args.caller(this);
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertCallerType(args, classnum(FormRun));
        #}
      ENDSOURCE
      SOURCE #testAssertCallerType_Null
        #void testAssertCallerType_Null()
        #{
        #    Args    args;
        #;
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertCallerType(args, classidget(this));
        #}
      ENDSOURCE
      SOURCE #testAssertEnumType
        #void testAssertEnumType()
        #{
        #    Args    args    = new Args();
        #;
        #    args.parmEnumType(enumnum(NoYes));
        #
        #    this.parmExceptionExpected(false);
        #    SysArgs::assertEnumType(args, enumnum(NoYes));
        #}
      ENDSOURCE
      SOURCE #testAssertEnumType_Empty
        #void testAssertEnumType_Empty()
        #{
        #    Args    args    = new Args();
        #;
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertEnumType(args, enumnum(NoYes));
        #}
      ENDSOURCE
      SOURCE #testAssertEnumType_NotMatch
        #void testAssertEnumType_NotMatch()
        #{
        #    Args    args    = new Args();
        #;
        #    args.parmEnumType(enumnum(NoYes));
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertEnumType(args, enumnum(LedgerTransType));
        #}
      ENDSOURCE
      SOURCE #testAssertEnumType_Null
        #void testAssertEnumType_Null()
        #{
        #    Args    args;
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertEnumType(args, enumnum(NoYes));
        #}
      ENDSOURCE
      SOURCE #testAssertFormDatasource_Empty
        #void testAssertFormDatasource_Empty()
        #{
        #    Args        args    = new Args();
        #;
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertFormDatasource(args);
        #}
      ENDSOURCE
      SOURCE #testAssertFormDatasource_Fail
        #void testAssertFormDatasource_Fail()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertFormDatasource(args);
        #}
      ENDSOURCE
      SOURCE #testAssertFormDatasource_Null
        #void testAssertFormDatasource_Null()
        #{
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertFormDatasource(null);
        #}
      ENDSOURCE
      SOURCE #testAssertRecord
        #void testAssertRecord()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(false);
        #    SysArgs::assertRecord(args, record.TableId);
        #}
      ENDSOURCE
      SOURCE #testAssertRecord_Empty
        #void testAssertRecord_Empty()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    //select firstOnly record;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(false);
        #    SysArgs::assertRecord(args, record.TableId);
        #}
      ENDSOURCE
      SOURCE #testAssertRecord_Map
        #void testAssertRecord_Map()
        #{
        #    Args            args    = new Args();
        #    CustVendTrans   record  = CustTrans::find(0);
        #;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(false);
        #    SysArgs::assertRecord(args, tablenum(CustTrans));
        #}
      ENDSOURCE
      SOURCE #testAssertRecord_MapEmpty
        #void testAssertRecord_MapEmpty()
        #{
        #    Args            args    = new Args();
        #    CustVendTrans   record;
        #;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertRecord(args, tablenum(CustTrans));
        #}
      ENDSOURCE
      SOURCE #testAssertRecord_NotMatch
        #void testAssertRecord_NotMatch()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertRecord(args, tablenum(UserGroupInfo));
        #}
      ENDSOURCE
      SOURCE #testAssertRecord_Null
        #void testAssertRecord_Null()
        #{
        #    Args        args;
        #    UserInfo    record;
        #;
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertRecord(args, record.TableId);
        #}
      ENDSOURCE
      SOURCE #testAssertRecordExists
        #void testAssertRecordExists()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(false);
        #    SysArgs::assertRecordExists(args, record.TableId);
        #}
      ENDSOURCE
      SOURCE #testAssertRecordExists_Empty
        #void testAssertRecordExists_Empty()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    //select firstOnly record;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertRecordExists(args, record.TableId);
        #}
      ENDSOURCE
      SOURCE #testAssertRecordExists_NotMatch
        #void testAssertRecordExists_NotMatch()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertRecordExists(args, tablenum(UserGroupInfo));
        #}
      ENDSOURCE
      SOURCE #testAssertRecordExists_Null
        #void testAssertRecordExists_Null()
        #{
        #    Args        args;
        #    UserInfo    record;
        #;
        #    this.parmExceptionExpected(true);
        #    SysArgs::assertRecordExists(args, record.TableId);
        #}
      ENDSOURCE
      SOURCE #testCheckCallerType
        #void testCheckCallerType()
        #{
        #    Args    args    = new Args();
        #;
        #    args.caller(this);
        #
        #    this.assertTrue(SysArgs::checkCallerType(args, classidget(this)));
        #}
      ENDSOURCE
      SOURCE #testCheckCallerType_Ancestor
        #void testCheckCallerType_Ancestor()
        #{
        #    Args    args    = new Args();
        #;
        #    args.caller(this);
        #
        #    this.assertTrue(SysArgs::checkCallerType(args, classnum(SysTestAssert)));
        #}
      ENDSOURCE
      SOURCE #testCheckCallerType_Empty
        #void testCheckCallerType_Empty()
        #{
        #    Args    args    = new Args();
        #;
        #    this.assertFalse(SysArgs::checkCallerType(args, classidget(this)));
        #}
      ENDSOURCE
      SOURCE #testCheckCallerType_Interface
        #void testCheckCallerType_Interface()
        #{
        #    Args    args    = new Args();
        #;
        #    args.caller(this);
        #
        #    this.assertTrue(SysArgs::checkCallerType(args, classnum(SysTestable)));
        #}
      ENDSOURCE
      SOURCE #testCheckCallerType_NotMatch
        #void testCheckCallerType_NotMatch()
        #{
        #    Args    args    = new Args();
        #;
        #    args.caller(this);
        #
        #    this.assertFalse(SysArgs::checkCallerType(args, classnum(FormRun)));
        #}
      ENDSOURCE
      SOURCE #testCheckCallerType_Null
        #void testCheckCallerType_Null()
        #{
        #    Args    args;
        #;
        #    this.assertFalse(SysArgs::checkCallerType(args, classidget(this)));
        #}
      ENDSOURCE
      SOURCE #testCheckEnumType
        #void testCheckEnumType()
        #{
        #    Args    args    = new Args();
        #;
        #    args.parmEnumType(enumnum(NoYes));
        #
        #    this.assertTrue(SysArgs::checkEnumType(args, enumnum(NoYes)));
        #}
      ENDSOURCE
      SOURCE #testCheckEnumType_Empty
        #void testCheckEnumType_Empty()
        #{
        #    Args    args = new Args();
        #;
        #    this.assertFalse(SysArgs::checkEnumType(args, enumnum(NoYes)));
        #}
      ENDSOURCE
      SOURCE #testCheckEnumType_NotMatch
        #void testCheckEnumType_NotMatch()
        #{
        #    Args    args    = new Args();
        #;
        #    args.parmEnumType(enumnum(NoYes));
        #
        #    this.assertFalse(SysArgs::checkEnumType(args, enumnum(LedgerTransType)));
        #}
      ENDSOURCE
      SOURCE #testCheckEnumType_Null
        #void testCheckEnumType_Null()
        #{
        #    Args    args;
        #;
        #    this.assertFalse(SysArgs::checkEnumType(args, enumnum(NoYes)));
        #}
      ENDSOURCE
      SOURCE #testCheckRecord
        #void testCheckRecord()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.assertTrue(SysArgs::checkRecord(args, record.TableId));
        #}
      ENDSOURCE
      SOURCE #testCheckRecord_Empty
        #void testCheckRecord_Empty()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    //select firstOnly record;
        #    args.record(record);
        #
        #    this.assertTrue(SysArgs::checkRecord(args, record.TableId));
        #}
      ENDSOURCE
      SOURCE #testCheckRecord_Map
        #void testCheckRecord_Map()
        #{
        #    Args            args    = new Args();
        #    CustVendTrans   record  = CustTrans::find(0);
        #;
        #    args.record(record);
        #
        #    this.assertTrue(SysArgs::checkRecord(args, tablenum(CustTrans)));
        #}
      ENDSOURCE
      SOURCE #testCheckRecord_MapEmpty
        #void testCheckRecord_MapEmpty()
        #{
        #    Args            args    = new Args();
        #    CustVendTrans   record;
        #;
        #    args.record(record);
        #
        #    this.assertFalse(SysArgs::checkRecord(args, tablenum(CustTrans)));
        #}
      ENDSOURCE
      SOURCE #testCheckRecord_NotMatch
        #void testCheckRecord_NotMatch()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.assertFalse(SysArgs::checkRecord(args, tablenum(UserGroupInfo)));
        #}
      ENDSOURCE
      SOURCE #testCheckRecord_Null
        #void testCheckRecord_Null()
        #{
        #    Args        args;
        #    UserInfo    record;
        #;
        #    this.assertFalse(SysArgs::checkRecord(args, record.TableId));
        #}
      ENDSOURCE
      SOURCE #testCheckRecordExists
        #void testCheckRecordExists()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.assertTrue(SysArgs::checkRecordExists(args, record.TableId));
        #}
      ENDSOURCE
      SOURCE #testCheckRecordExists_Empty
        #void testCheckRecordExists_Empty()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    //select firstOnly record;
        #    args.record(record);
        #
        #    this.assertFalse(SysArgs::checkRecordExists(args, record.TableId));
        #}
      ENDSOURCE
      SOURCE #testCheckRecordExists_NotMatch
        #void testCheckRecordExists_NotMatch()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.assertFalse(SysArgs::checkRecordExists(args, tablenum(UserGroupInfo)));
        #}
      ENDSOURCE
      SOURCE #testCheckRecordExists_Null
        #void testCheckRecordExists_Null()
        #{
        #    Args        args;
        #    UserInfo    record;
        #;
        #    this.assertFalse(SysArgs::checkRecordExists(args, record.TableId));
        #}
      ENDSOURCE
      SOURCE #testEnsureCallerFormName
        #void testEnsureCallerFormName()
        #{
        #    Args        args            = new Args();
        #
        #    str         formName        = formstr(SysUserInfo);
        #    FormRun     formRun         = classFactory.formRunClass(new Args(formName));
        #    SysArgs     sysArgs;
        #;
        #    args.caller(formRun);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(false);
        #    sysArgs.ensureCallerFormName(formName);
        #}
      ENDSOURCE
      SOURCE #testEnsureCallerFormName_Empty
        #void testEnsureCallerFormName_Empty()
        #{
        #    str         formName    = formstr(SysUserInfo);
        #    SysArgs     sysArgs     = SysArgs::createFromArgs(new Args());
        #;
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureCallerFormName(formName);
        #}
      ENDSOURCE
      SOURCE #testEnsureCallerFormName_NotForm
        #void testEnsureCallerFormName_NotForm()
        #{
        #    Args        args        = new Args();
        #    str         formName    = formstr(SysUserInfo);
        #    SysArgs     sysArgs;
        #;
        #    args.caller(this);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureCallerFormName(formName);
        #}
      ENDSOURCE
      SOURCE #testEnsureCallerFormName_NotMatch
        #void testEnsureCallerFormName_NotMatch()
        #{
        #    Args        args            = new Args();
        #
        #    str         formName        = formstr(SysUserInfo);
        #    Args        formRunArgs     = new Args(formName);
        #    FormRun     formRun         = classFactory.formRunClass(formRunArgs);
        #    SysArgs     sysArgs;
        #;
        #    args.caller(formRun);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureCallerFormName(formstr(SysUserGroupInfo));
        #}
      ENDSOURCE
      SOURCE #testEnsureCallerType
        #void testEnsureCallerType()
        #{
        #    Args        args    = new Args();
        #    SysArgs     sysArgs;
        #;
        #    args.caller(this);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(false);
        #    sysArgs.ensureCallerType(classidget(this));
        #}
      ENDSOURCE
      SOURCE #testEnsureCallerType_Ancestor
        #void testEnsureCallerType_Ancestor()
        #{
        #    Args        args    = new Args();
        #    SysArgs     sysArgs;
        #;
        #    args.caller(this);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(false);
        #    sysArgs.ensureCallerType(classnum(SysTestAssert));
        #}
      ENDSOURCE
      SOURCE #testEnsureCallerType_Empty
        #void testEnsureCallerType_Empty()
        #{
        #    SysArgs     sysArgs     = SysArgs::createFromArgs(new Args());
        #;
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureCallerType(classidget(this));
        #}
      ENDSOURCE
      SOURCE #testEnsureCallerType_Interface
        #void testEnsureCallerType_Interface()
        #{
        #    Args        args    = new Args();
        #    SysArgs     sysArgs;
        #;
        #    args.caller(this);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(false);
        #    sysArgs.ensureCallerType(classnum(SysTestable));
        #}
      ENDSOURCE
      SOURCE #testEnsureCallerType_NotMatch
        #void testEnsureCallerType_NotMatch()
        #{
        #    Args        args    = new Args();
        #    SysArgs     sysArgs;
        #;
        #    args.caller(this);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureCallerType(classnum(FormRun));
        #}
      ENDSOURCE
      SOURCE #testEnsureEnumType
        #void testEnsureEnumType()
        #{
        #    Args        args    = new Args();
        #    SysArgs     sysArgs;
        #;
        #    args.parmEnumType(enumnum(NoYes));
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(false);
        #    sysArgs.ensureEnumType(enumnum(NoYes));
        #}
      ENDSOURCE
      SOURCE #testEnsureEnumType_Empty
        #void testEnsureEnumType_Empty()
        #{
        #    SysArgs     sysArgs = SysArgs::createFromArgs(new Args());
        #;
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureEnumType(enumnum(NoYes));
        #}
      ENDSOURCE
      SOURCE #testEnsureEnumType_NotMatch
        #void testEnsureEnumType_NotMatch()
        #{
        #    Args        args    = new Args();
        #    SysArgs     sysArgs;
        #;
        #    args.parmEnumType(enumnum(NoYes));
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureEnumType(enumnum(LedgerTransType));
        #}
      ENDSOURCE
      SOURCE #testEnsureFormDatasource_Empty
        #void testEnsureFormDatasource_Empty()
        #{
        #    SysArgs     sysArgs = SysArgs::createFromArgs(new Args());
        #;
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureFormDatasource();
        #}
      ENDSOURCE
      SOURCE #testEnsureFormDatasource_Fail
        #void testEnsureFormDatasource_Fail()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #    SysArgs     sysArgs;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureFormDatasource();
        #}
      ENDSOURCE
      SOURCE #testEnsureRecord
        #void testEnsureRecord()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #    SysArgs     sysArgs;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(false);
        #    sysArgs.ensureRecord(record.TableId);
        #}
      ENDSOURCE
      SOURCE #testEnsureRecord_Empty
        #void testEnsureRecord_Empty()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #    SysArgs     sysArgs;
        #;
        #    //select firstOnly record;
        #    args.record(record);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(false);
        #    sysArgs.ensureRecord(record.TableId);
        #}
      ENDSOURCE
      SOURCE #testEnsureRecord_Map
        #void testEnsureRecord_Map()
        #{
        #    Args            args    = new Args();
        #    CustVendTrans   record  = CustTrans::find(0);
        #    SysArgs         sysArgs;
        #;
        #    args.record(record);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(false);
        #    sysArgs.ensureRecord(tablenum(CustTrans));
        #}
      ENDSOURCE
      SOURCE #testEnsureRecord_MapEmpty
        #void testEnsureRecord_MapEmpty()
        #{
        #    Args            args    = new Args();
        #    CustVendTrans   record;
        #    SysArgs         sysArgs;
        #;
        #    args.record(record);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureRecord(tablenum(CustTrans));
        #}
      ENDSOURCE
      SOURCE #testEnsureRecord_NotMatch
        #void testEnsureRecord_NotMatch()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #    SysArgs     sysArgs;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureRecord(tablenum(UserGroupInfo));
        #}
      ENDSOURCE
      SOURCE #testEnsureRecordExists
        #void testEnsureRecordExists()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #    SysArgs     sysArgs;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(false);
        #    sysArgs.ensureRecordExists(record.TableId);
        #}
      ENDSOURCE
      SOURCE #testEnsureRecordExists_Empty
        #void testEnsureRecordExists_Empty()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #    SysArgs     sysArgs;
        #;
        #    //select firstOnly record;
        #    args.record(record);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureRecordExists(record.TableId);
        #}
      ENDSOURCE
      SOURCE #testEnsureRecordExists_NotMatch
        #void testEnsureRecordExists_NotMatch()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #    SysArgs     sysArgs;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #    sysArgs = SysArgs::createFromArgs(args);
        #
        #    this.parmExceptionExpected(true);
        #    sysArgs.ensureRecordExists(tablenum(UserGroupInfo));
        #}
      ENDSOURCE
      SOURCE #testGetEnum
        #void testGetEnum()
        #{
        #    Args    args    = new Args();
        #;
        #    args.parmEnumType(enumnum(NoYes));
        #    args.parmEnum(NoYes::Yes);
        #
        #    // as Integers!
        #    this.assertEquals(0+NoYes::Yes, SysArgs::getEnum(args, enumnum(NoYes)));
        #}
      ENDSOURCE
      SOURCE #testGetEnum_Empty
        #void testGetEnum_Empty()
        #{
        #    Args    args = new Args();
        #;
        #    this.parmExceptionExpected(true);
        #    this.assertEquals(NoYes::Yes, SysArgs::getEnum(args, enumnum(NoYes)));
        #}
      ENDSOURCE
      SOURCE #testGetEnum_NotMatch
        #void testGetEnum_NotMatch()
        #{
        #    Args    args    = new Args();
        #;
        #    args.parmEnumType(enumnum(LedgerTransType));
        #    args.parmEnum(LedgerTransType::Sales);
        #
        #    this.parmExceptionExpected(true);
        #    this.assertEquals(NoYes::Yes, SysArgs::getEnum(args, enumnum(NoYes)));
        #}
      ENDSOURCE
      SOURCE #testGetEnum_Null
        #void testGetEnum_Null()
        #{
        #    Args    args;
        #;
        #    this.parmExceptionExpected(true);
        #    this.assertEquals(NoYes::Yes, SysArgs::getEnum(args, enumnum(NoYes)));
        #}
      ENDSOURCE
      SOURCE #testGetEnumDefault
        #void testGetEnumDefault()
        #{
        #    Args    args    = new Args();
        #;
        #    args.parmEnumType(enumnum(SysModule));
        #    args.parmEnum(SysModule::Ledger);
        #
        #    // as Integers!
        #    this.assertEquals(0+SysModule::Ledger, SysArgs::getEnumDefault(args, enumnum(SysModule), SysModule::System));
        #}
      ENDSOURCE
      SOURCE #testGetEnumDefault_Empty
        #void testGetEnumDefault_Empty()
        #{
        #    Args    args = new Args();
        #;
        #    // as Integers!
        #    this.assertEquals(0+SysModule::System, SysArgs::getEnumDefault(args, enumnum(SysModule), SysModule::System));
        #}
      ENDSOURCE
      SOURCE #testGetEnumDefault_NotMatch
        #void testGetEnumDefault_NotMatch()
        #{
        #    Args    args    = new Args();
        #;
        #    args.parmEnumType(enumnum(LedgerTransType));
        #    args.parmEnum(LedgerTransType::Sales);
        #
        #    // as Integers!
        #    this.assertEquals(0+SysModule::System, SysArgs::getEnumDefault(args, enumnum(SysModule), SysModule::System));
        #}
      ENDSOURCE
      SOURCE #testGetEnumDefault_Null
        #void testGetEnumDefault_Null()
        #{
        #    Args    args;
        #;
        #    // as Integers!
        #    this.assertEquals(0+SysModule::System, SysArgs::getEnumDefault(args, enumnum(SysModule), SysModule::System));
        #}
      ENDSOURCE
      SOURCE #testGetRecord
        #void testGetRecord()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.assertTrue(bufCmp(record,SysArgs::getRecord(args, record.TableId)));
        #}
      ENDSOURCE
      SOURCE #testGetRecord_Empty
        #void testGetRecord_Empty()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    //select firstOnly record;
        #    args.record(record);
        #
        #    this.assertTrue(bufCmp(record,SysArgs::getRecord(args, record.TableId)));
        #}
      ENDSOURCE
      SOURCE #testGetRecord_NotMatch
        #void testGetRecord_NotMatch()
        #{
        #    Args        args    = new Args();
        #    UserInfo    record;
        #;
        #    select firstOnly record;
        #    args.record(record);
        #
        #    this.parmExceptionExpected(true);
        #    SysArgs::getRecord(args, tablenum(UserGroupInfo));
        #}
      ENDSOURCE
      SOURCE #testGetRecord_Null
        #void testGetRecord_Null()
        #{
        #    Args        args;
        #    UserInfo    record;
        #;
        #    this.parmExceptionExpected(true);
        #    SysArgs::getRecord(args, record.TableId);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : SysArgs unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #SysArgs
   SHARED
  PROPERTIES
    Name                #SysArgs
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 7609
      NODETYPE 329
      NAME #SysArgs
    ENDNODE
    BEGINNODE
      FILETYPE 0
      UTILTYPE 45
      UTILOBJECTID 50251
      NODETYPE 329
      NAME #SysArgsTest
    ENDNODE
  ENDPROJECT
  

***Element: END
